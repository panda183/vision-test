#include "api_kinect_cv.h"
#include <iostream>
#include <opencv2/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include "openni2.h"
#include "../openni2/Singleton.h"
#include <unistd.h>
//#include "../sign_detection/SignDetection.h"
#include <chrono>
//#include "signsRecognizer.h"
//#include "extractInfo.h"
#include <stdlib.h>
//#include "multilane.h"
#include "Hal.h"
#include "LCDI2C.h"
#include "api_i2c_pwm.h"
#include "../driverlesscar_client/LaneDetector/LaneDetector.h"

using namespace cv;
using namespace std;
using namespace openni;
using namespace framework;
//using namespace signDetection;
using namespace EmbeddedFramework;

#define SW1_PIN	160
#define SW2_PIN	161
#define SW3_PIN	163
#define SW4_PIN	164
#define SENSOR	165
#define LED	166

int mode=0;
int minH=100,minS=100,minV= 65,maxH=135,maxS=255,maxV=255;
int throttle_val = 30;
double theta = 80;
Mat leftSign;
Mat rightSign;
GPIO *gpio;
PCA9685 *pca9685;
I2C *i2c_device;
LCDI2C *lcd;
Mat depthImg, colorImg, grayImage, disparity,birdViewImg,laneImg;
bool sw1_stat,sw2_stat,sw3_stat,sw4_stat;
bool bamlephai=true;

void init();
void putTextLCD(int x, int y,char *msg);
void clearLCD();
bool nothingFrontSensor();
bool isPressed(int PIN);
int getLCDkey();
void Menu();
void RunCar();
void setControl(int speed,double angle);
void Ready();
void DetectSign(Mat &src);
int recognizeSign(Mat &sign);
double similar(Mat &img1, Mat &img2);
void equalizeHistBGR(Mat &src, Mat &dst);
double distance(Point p1, Point p2);
Mat birdView(Mat &input);
double getAngleSteering();
double calAngle(Point &target);
void laneMarkingDetector(Mat srcGray, Mat &dstGray,int tau);

int main( int argc, char* argv[] )
{
    init();
    Menu();
}
void RunCar()
{
    clearLCD();
    putTextLCD(0,0,"Running");
    do
    {
        int key=getLCDkey();
        if(key==3||!nothingFrontSensor())
        {
            Menu();
        }
        OpenNI2::Instance()->getData(colorImg, depthImg, grayImage, disparity);
        //DetectSign(colorImg);
        //imshow("gray",grayImage);
        laneMarkingDetector(grayImage,laneImg ,12);
        double angle=getAngleSteering();
        cout<<angle<<endl;
        setControl(40,angle);
    }
    while( waitKey(1)!=27);
    exit(1);
}
void Ready()
{
    clearLCD();
    putTextLCD(0,0,"Ready!!!");
    while(!nothingFrontSensor())
    {
        int key=getLCDkey();
        if(key==3)
        {
            Menu();
        }
    }
    RunCar();
}

void Menu()
{
    double angle=0;
    setControl(0,0);
    clearLCD();
    putTextLCD(0,0,"Mode:Nghiem Tuc");
    do
    {
        int key=getLCDkey();
        if(key==4)
        {
            mode=(mode+1)%2;
            switch (mode)
            {
            case 0:
                putTextLCD(5,0,"Nghiem Tuc");
                break;
            case 1:
                putTextLCD(5,0,"Thi cu =))");
                break;
            default:
                break;
            }
        }
        if(key==3)
        {
            Ready();
        }
    }
    while(1);
}
void laneMarkingDetector(Mat srcGray, Mat &dstGray,int tau)
{
//xac dinh lan, do rong = tau, anh vao srcGray: anh xam, dstGray: anh tra ve
    srcGray=birdView(srcGray);
    //dstGray=birdView(srcGray);
    dstGray=srcGray.clone();
    int aux=0;
    for(int j=0; j<srcGray.rows; j++)
    {
        for(int i=tau; i<srcGray.cols-tau; i++)
        {
            aux=srcGray.at<uchar>(j,i)*2;
            aux-=srcGray.at<uchar>(j,i-tau);
            aux-=srcGray.at<uchar>(j,i+tau);
            aux-=abs((int)(srcGray.at<uchar>(j,i-tau)-srcGray.at<uchar>(j,i+tau)));
            aux=(aux<0)?0:aux;
            aux=(aux>255)?255:aux;
            dstGray.at<uchar>(j,i)=aux;
        }
    }
    threshold(dstGray, dstGray, 220, 255, CV_THRESH_BINARY);
    //imshow("dst",dstGray);
}
double getAngleSteering()
{
    /*int yCenter = 150;
    int offSet=64;
    Point target = Point(birdViewImg.cols / 2, birdViewImg.rows - 1);
    if (bamlephai)
    {
    	for (size_t j = birdViewImg.cols - 1; j > 2; j--)
    	{
    		if ((int)birdViewImg.at<uchar>(yCenter, j) == 0 && (int)birdViewImg.at<uchar>(yCenter, j - 1) == 255)
    		{
    			target = Point(j - offSet, yCenter);
                if(calAngle(target)<20){
                    break;
                }
    		}
    	}
    }
    else
    {
    	for (size_t j = 0; j < birdViewImg.cols - 2; j++)
    	{
    		if ((int)birdViewImg.at<uchar>(yCenter, j) == 0 && (int)birdViewImg.at<uchar>(yCenter, j + 1) == 255)
    		{
                target = Point(j + offSet, yCenter);
                if(calAngle(target)<20){
                    break;
                }
    		}
    	}
    }

    imshow("birdView",birdViewImg);
    return calAngle(target);*/

    /*int yCenter = 190,xCenter=laneImg.cols/2;
    int offSet=40;
    int xLane;
    int dau=(bamlephai-0.5)*2;
    vector<int> listXPos;

    for(int c=1; c<=6; c++)
    {
	// xet tung vach ke, do rong moi vach ke = 15
        xLane=-1;
        for(int i=xCenter; (i-(xCenter+dau*2*offSet))!=0; i+=dau)
        {
		// dich i sang +1/ -1 cho den khi i = xCenter + 2 * offset
            if(laneImg.at<uchar>(laneImg.rows-c*8,i)==255)
            {
		// check diem neu diem (height - c * 15, i ) red
                xLane=i-dau*offSet; // dich x sang mot doan offset. Neu bam le phai re sang trai va nguoc lai
                xCenter=xLane;
                line(laneImg,Point(i-offSet/2,laneImg.rows-c*8),Point(i+offSet/2,laneImg.rows-c*8),Scalar(255)); // ve duong thang
                break;
            }
        }
        if(xLane==-1)
        {
            break;
        }
        else
        {
            listXPos.push_back(xLane);
        }
    }
    if(xLane==-1){
	// khi nao thi xLane = -1?
        for(int i=laneImg.cols/2; (i-(laneImg.cols/2-dau*2*offSet))!=0; i-=dau)
        {
		// i chay tu chinh giua anh, i != width / 2 - 2 * offset; i--
            if(laneImg.at<uchar>(yCenter,i)==255)
            {
                xLane=i+dau*offSet;
                line(laneImg,Point(i-offSet/2,yCenter),Point(i+offSet/2,yCenter),Scalar(255));
                break;
            }
        }
        if(xLane==-1){
            imwrite("color.jpg",colorImg);
            imwrite("lane.jpg",laneImg);
            Menu();
        }else{
            cout<<"co vat can"<<endl;
        }
    }else {
        xLane=listXPos.back();
        cout<<"khong co vat can"<<endl;
    }

    Point target = Point(xLane,yCenter);
    line(laneImg,Point(laneImg.cols/2,laneImg.rows),target,Scalar(255));
    imshow("lane",laneImg);
    //waitKey();*/
    Point target;
    for(int i=laneImg.cols-12;i>0;i--){
        if(laneImg.at<uchar>(200,i)==255){
            target= Point(i-30,200);
            break;
        }
    }
    line(laneImg,Point(laneImg.cols/2,laneImg.rows),target,Scalar(255));
    imshow("lane",laneImg);
    return calAngle(target);
}
double calAngle(Point &target)
{
	// tinh goc tu diem chinh giua anh -> target
    float angle;
    if (target.x != laneImg.cols / 2)
    {
        double k = (target.y * 1.0f - laneImg.rows) / (target.x * 1.0f - laneImg.cols / 2);
        angle = -atan(k) * 180 / 3.14159265;
    }
    else
    {
        angle = 90;
    }
    int dau = angle / abs(angle);
    return (90 - abs(angle)) * dau*-2.5;
}
void DetectSign(Mat &src)
{
    Mat hsv, gray;
    Rect roiDetect = Rect(200, 50, 300, 120);
    cvtColor(src(roiDetect), hsv, COLOR_BGR2HSV);
    Scalar min = Scalar(minH, minS, minV);   //HSV VALUE
    Scalar max = Scalar(maxH, maxS, maxV); //HSV VALUE
    inRange(hsv, min, max, gray);

    erode(gray, gray, Mat(), Point(-1, -1), 3, 1, 1);
    dilate(gray, gray, Mat(), Point(-1, -1), 9, 1, 1);
    imshow("HSV",gray);
    vector<vector<Point>> contours;
    findContours(gray, contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE);
    for (int i = 0; i < contours.size(); i++)
    {
        if (contours[i].size() > 150)
        {
            Rect r = boundingRect(contours[i]);
            if (abs((r.width * 1.0 / r.height) - 1) < 0.1)
            {
                r.x += roiDetect.x + 6;
                r.y += roiDetect.y + 6;
                r.width -= 6 * 2;
                r.height -= 6 * 2;
                rectangle(src, r, Scalar(0, 0, 255));
                Mat matsign = src(r);
                int bamlephai = recognizeSign(matsign);
                if(bamlephai==0)
                {
                    cout<<"Ben trai";
                    //setControl(0,80);
                }
                if(bamlephai==1)
                {
                    cout<<"Ben phai";
                    //setControl(0,-80);
                }
                imshow("range", matsign);
            }
        }
    }
    rectangle(src, roiDetect, Scalar(0, 255, 0));
    imshow("src", src);
}
int recognizeSign(Mat &sign)
{
    double p1 = similar(sign, leftSign);
    double p2 = similar(sign, rightSign);
    cout<<p1<<":"<<p2<<endl;
    if (p1 > p2)
        return 0;
    return 1;
}
Mat birdView(Mat &input)
{
    Mat output;
    // Input Quadilateral or Image plane coordinates
    Point2f inputQuad[4];
    // Output Quadilateral or World plane coordinates
    Point2f outputQuad[4];

    // Lambda Matrix
    Mat lambda;

    // Set the lambda matrix the same type and size as input
    lambda = Mat::zeros(input.rows, input.cols, input.type());
    // The 4 points that select quadilateral on the input , from top-left in clockwise order
    // These four pts are the sides of the rect box used as input


    inputQuad[0] = Point2f(0, 0.35*input.rows);
    inputQuad[1] = Point2f(input.cols, 0.35*input.rows);
    inputQuad[2] = Point2f(input.cols, input.rows);
    inputQuad[3] = Point2f(0, input.rows);
    // The 4 points where the mapping is to be done , from top-left in clockwise order
    outputQuad[0] = Point2f(-0.156*input.cols, 0);
    outputQuad[1] = Point2f(input.cols + 0.156*input.cols, 0);
    outputQuad[2] = Point2f(input.cols*(1-0.35), input.rows);
    outputQuad[3] = Point2f(0.35*input.cols, input.rows);

    // Get the Perspective Transform Matrix i.e. lambda
    lambda = getPerspectiveTransform(inputQuad, outputQuad);
    // Apply the Perspective Transform just found to the src image
    warpPerspective(input, output, lambda, output.size());
    //cvtColor(output, output, COLOR_BGR2GRAY);
    //threshold(output, output, 128, 255, CV_THRESH_BINARY);
//    imshow("Output", output);
    return output;
}
void init()
{
    //=========== Init  =======================================================
    ////////  Init PCA9685 driver   ///////////////////////////////////////////
    pca9685 = new PCA9685() ;
    api_pwm_pca9685_init( pca9685 );
    if (pca9685->error < 0) return;
    //======

    gpio = new GPIO();
    i2c_device = new I2C();
    lcd = new LCDI2C();
    gpio->gpioExport(SW1_PIN);
    gpio->gpioExport(SW2_PIN);
    gpio->gpioExport(SW3_PIN);
    gpio->gpioExport(SW4_PIN);
    gpio->gpioExport(SENSOR);
    gpio->gpioExport(LED);
    gpio->gpioSetDirection(SW1_PIN, INPUT);
    gpio->gpioSetDirection(SW2_PIN, INPUT);
    gpio->gpioSetDirection(SW3_PIN, INPUT);
    gpio->gpioSetDirection(SW4_PIN, INPUT);
    gpio->gpioSetDirection(SENSOR, INPUT);
    gpio->gpioSetDirection(LED, OUTPUT);

    i2c_device->m_i2c_bus = 2;

    if (!i2c_device->HALOpen())
    {
        printf("Cannot open I2C peripheral\n");
        exit(-1);
    }
    else printf("I2C peripheral is opened\n");
    unsigned char data;
    if (!i2c_device->HALRead(0x38, 0xFF, 0, &data, ""))
    {
        printf("LCD is not found!\n");
        exit(-1);
    }
    else printf ("LCD is connected\n");
    lcd->LCDInit(i2c_device, 0x38, 20, 4);
    lcd->LCDBacklightOn();
    lcd->LCDCursorOn();

    OpenNI2::Instance() -> init();
    leftSign = imread("left.jpg",1);
    rightSign = imread("right.jpg",1);

    namedWindow("HSV",WINDOW_AUTOSIZE);
    createTrackbar("minH","HSV",&minH,180,NULL);
    createTrackbar("minS","HSV",&minS,255,NULL);
    createTrackbar("minV","HSV",&minV,255,NULL);
    createTrackbar("maxH","HSV",&maxH,180,NULL);
    createTrackbar("maxS","HSV",&maxS,255,NULL);
    createTrackbar("maxV","HSV",&maxV,255,NULL);


}
double distance(Point p1, Point p2)
{
    return sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));
}
void equalizeHistBGR(Mat &src, Mat &dst)
{
    if (src.channels() >= 3)
    {
        Mat ycrcb;

        cvtColor(src, ycrcb, CV_BGR2YUV);

        vector<Mat> channels;
        split(ycrcb, channels);

        equalizeHist(channels[0], channels[0]);

        Mat result;
        merge(channels, ycrcb);

        cvtColor(ycrcb, dst, CV_YUV2BGR);
    }
}
double similar(Mat &img1, Mat &img2)
{
    Mat hsv1, hsv2;
    resize(img1, hsv1, img1.size());
    equalizeHistBGR(hsv1, hsv1);
    cvtColor(hsv1, hsv1, COLOR_BGR2HSV);
    resize(img2, hsv2, hsv1.size());
    cvtColor(hsv2, hsv2, COLOR_BGR2HSV);
    int d = 0, s = 0;
    for (size_t i = 0; i < hsv1.cols; i++)
    {
        for (size_t j = 0; j < hsv1.rows; j++)
        {
            if (distance(Point(i, j), Point(hsv1.cols / 2, hsv1.rows / 2)) <= hsv1.rows / 2)
            {
                s++;
                if (hsv1.at<Vec3b>(j, i)[1] > 70 && hsv1.at<Vec3b>(j, i)[2] > 30)
                {
                    if (abs(hsv2.at<Vec3b>(j, i)[0] - hsv1.at<Vec3b>(j, i)[0]) < 15)
                    {
                        d++;
                    }
                }
                else
                {
                    if (abs(hsv2.at<Vec3b>(j, i)[2] - hsv1.at<Vec3b>(j, i)[2]) < 10)
                    {
                        d++;
                    }
                }
            }
        }
    }
    return (d * 1.0 / s);
}

void setControl(int speed,double angle)
{
    throttle_val=speed;
    theta=angle;
    api_set_FORWARD_control(pca9685,throttle_val);
    api_set_STEERING_control(pca9685,theta);
}
void putTextLCD(int x, int y,char *msg)
{
    lcd->LCDSetCursor(x,y);
    lcd->LCDPrintStr(msg);
}
void clearLCD()
{
    lcd->LCDClear();
}
bool nothingFrontSensor()
{
    unsigned int sensor_status = 0;
    for(int i=0; i<20; i++)
    {
        gpio->gpioGetValue(SENSOR, &sensor_status);
        if(sensor_status==1) return true;
    }
    return false;
}

bool isPressed(int PIN)
{
    unsigned int sensor_status = 0;
    for(int i=0; i<50; i++)
    {
        gpio->gpioGetValue(PIN, &sensor_status);
        if(sensor_status==0) return true;
    }
    return false;

}
int getLCDkey()
{
    if(isPressed(SW4_PIN)&&!sw4_stat)
    {
        sw4_stat=true;
    }
    if(!isPressed(SW4_PIN)&&sw4_stat)
    {
        sw4_stat=false;
        return 4;
    }
    if(isPressed(SW3_PIN)&&!sw3_stat)
    {
        sw3_stat=true;
    }
    if(!isPressed(SW3_PIN)&&sw3_stat)
    {
        sw3_stat=false;
        return 3;
    }
    if(isPressed(SW2_PIN)&&!sw2_stat)
    {
        sw2_stat=true;
    }
    if(!isPressed(SW2_PIN)&&sw2_stat)
    {
        sw2_stat=false;
        return 2;
    }
    if(isPressed(SW1_PIN)&&!sw1_stat)
    {
        sw1_stat=true;
    }
    if(!isPressed(SW1_PIN)&&sw1_stat)
    {
        sw1_stat=false;
        return 1;
    }
    return 0;
}


